# .github/workflows/springboot-curl-ci.yml
name: "CI (Spring Boot via curl + Maven)"

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      group_id:
        description: "Maven groupId"
        required: true
        default: "com.example"
      artifact_id:
        description: "Maven artifactId (프로젝트 폴더명)"
        required: true
        default: "demo-app"
      package_name:
        description: "기본 패키지 (예: com.example.demo)"
        required: true
        default: "com.example.demo"
      boot_version:
        description: "Spring Boot 버전"
        required: true
        default: "3.3.3"
      java_version:
        description: "Java 버전"
        required: true
        default: "17"
      dependencies:
        description: "Initializr dependencies (쉼표구분, 예: web,actuator,lombok,validation)"
        required: true
        default: "web,actuator,lombok,validation"

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      GROUP_ID: ${{ github.event.inputs.group_id || 'com.example' }}
      ARTIFACT_ID: ${{ github.event.inputs.artifact_id || 'demo-app' }}
      PACKAGE_NAME: ${{ github.event.inputs.package_name || 'com.example.demo' }}
      BOOT_VERSION: ${{ github.event.inputs.boot_version || '3.3.3' }}
      JAVA_VERSION: ${{ github.event.inputs.java_version || '17' }}
      DEPENDENCIES: ${{ github.event.inputs.dependencies || 'web,actuator,lombok,validation' }}
      PROJECT_DIR: . # 레포 루트에 전개 (원하면 ./app 등으로 변경)

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tools
        run: |
          set -Eeuo pipefail
          sudo apt-get update -y
          sudo apt-get install -y curl unzip

      - name: Generate Spring Boot project via curl (if no pom.xml)
        run: |
          set -Eeuo pipefail
          # 이미 pom.xml이 있으면 생성 스킵
          if find "${PROJECT_DIR}" -maxdepth 2 -name "pom.xml" | grep -q .; then
            echo "pom.xml detected -> skip Initializr download"
            exit 0
          fi

          ZIP_PATH="${RUNNER_TEMP}/${ARTIFACT_ID}.zip"
          echo "Downloading from Spring Initializr..."
          curl -fsSL \
            "https://start.spring.io/starter.zip?type=maven-project&language=java&bootVersion=${BOOT_VERSION}&baseDir=${ARTIFACT_ID}&groupId=${GROUP_ID}&artifactId=${ARTIFACT_ID}&name=${ARTIFACT_ID}&packageName=${PACKAGE_NAME}&javaVersion=${JAVA_VERSION}&dependencies=${DEPENDENCIES}" \
            -o "${ZIP_PATH}"

          echo "Unzipping to ${PROJECT_DIR} ..."
          unzip -q "${ZIP_PATH}" -d "${PROJECT_DIR}"

          # 루트로 바로 전개되면 좋지만, baseDir 하위에 생성될 수 있으니 평탄화
          if [ -d "${PROJECT_DIR}/${ARTIFACT_ID}" ]; then
            shopt -s dotglob
            mv "${PROJECT_DIR}/${ARTIFACT_ID}/"* "${PROJECT_DIR}/"
            rmdir "${PROJECT_DIR}/${ARTIFACT_ID}"
          fi

      - name: Ensure basic files (via curl or fallback creation)
        run: |
          set -Eeuo pipefail
          # .gitignore (없으면 GitHub 템플릿 다운로드)
          if [ ! -f ".gitignore" ]; then
            echo "Downloading Java.gitignore ..."
            curl -fsSL "https://raw.githubusercontent.com/github/gitignore/main/Java.gitignore" -o ".gitignore" || {
              echo "# fallback .gitignore" > .gitignore
              cat <<'EOT' >> .gitignore
              target/
              .idea/
              .project
              .classpath
              .settings/
              .DS_Store
              *.iml
              EOT
            }
          fi

          # application.yml (없으면 최소 설정 생성)
          RES_DIR="src/main/resources"
          mkdir -p "${RES_DIR}"
          if [ ! -f "${RES_DIR}/application.yml" ]; then
            echo "Creating ${RES_DIR}/application.yml ..."
            cat > "${RES_DIR}/application.yml" <<'YML'
            server:
              port: 8080
            management:
              endpoints:
                web:
                  exposure:
                    include: health,info
            spring:
              application:
                name: demo-app
            YML
          fi

          # 샘플 Controller (없을 때만)
          APP_DIR="src/main/java/$(echo "${PACKAGE_NAME}" | tr '.' '/')"
          mkdir -p "${APP_DIR}"
          if ! ls "${APP_DIR}"/*.java >/dev/null 2>&1; then
            echo "Creating sample controller ..."
            cat > "${APP_DIR}/HelloController.java" <<'JAVA'
            package REPLACE_ME;

            import org.springframework.web.bind.annotation.GetMapping;
            import org.springframework.web.bind.annotation.RestController;

            @RestController
            public class HelloController {
              @GetMapping("/")
              public String hello() {
                return "Hello Spring Boot (curl + CI)!";
              }
            }
            JAVA
            sed -i "s|REPLACE_ME|${PACKAGE_NAME}|g" "${APP_DIR}/HelloController.java"
          fi

          # README.md 없으면 생성
          if [ ! -f "README.md" ]; then
            cat > README.md <<EOF
            # ${ARTIFACT_ID}

            Generated via GitHub Actions (curl + Spring Initializr)

            ## Build
            \`\`\`bash
            ./mvnw -B -DskipTests package
            \`\`\`

            ## Run
            \`\`\`bash
            ./mvnw spring-boot:run
            \`\`\`
            EOF
          fi

      - name: Set up Java (Temurin ${{ env.JAVA_VERSION }})
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: ${{ env.JAVA_VERSION }}
          cache: "maven"

      - name: Make mvnw executable (if present)
        run: |
          set -Eeuo pipefail
          if [ -f "./mvnw" ]; then
            chmod +x ./mvnw
          fi

      - name: Build with Maven Wrapper
        run: |
          set -Eeuo pipefail
          if [ -f "./mvnw" ]; then
            ./mvnw -B -DskipTests package
          else
            echo "No mvnw found; installing maven and building"
            sudo apt-get update -y
            sudo apt-get install -y maven
            mvn -B -DskipTests package
          fi

      - name: List build outputs
        run: |
          set -Eeuo pipefail
          echo "Artifacts under target/:"
          find target -maxdepth 1 -type f -name "*.jar" -print || true
