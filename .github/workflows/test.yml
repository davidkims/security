name: "CI (Spring Boot via curl + Maven, No-Heredoc)"

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      group_id:
        description: "Maven groupId"
        required: true
        default: "com.example"
      artifact_id:
        description: "Maven artifactId (프로젝트 폴더명)"
        required: true
        default: "demo-app"
      package_name:
        description: "기본 패키지 (예: com.example.demo)"
        required: true
        default: "com.example.demo"
      boot_version:
        description: "(선택) Spring Boot 버전. 비우면 Initializr 기본값"
        required: false
        default: ""
      java_version:
        description: "Java 버전"
        required: true
        default: "17"
      dependencies:
        description: "쉼표구분 deps (예: web,actuator,lombok,validation)"
        required: true
        default: "web,actuator,lombok,validation"

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      GROUP_ID: ${{ github.event.inputs.group_id || 'com.example' }}
      ARTIFACT_ID: ${{ github.event.inputs.artifact_id || 'demo-app' }}
      PACKAGE_NAME: ${{ github.event.inputs.package_name || 'com.example.demo' }}
      BOOT_VERSION: ${{ github.event.inputs.boot_version || '' }}
      JAVA_VERSION: ${{ github.event.inputs.java_version || '17' }}
      DEPENDENCIES: ${{ github.event.inputs.dependencies || 'web,actuator,lombok,validation' }}
      PROJECT_DIR: .

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tools
        run: |
          set -Eeuo pipefail
          sudo apt-get update -y
          sudo apt-get install -y curl unzip

      - name: Generate Spring Boot project via curl (robust with fallbacks)
        shell: bash
        run: |
          set -Eeuo pipefail

          # 기존 pom.xml 있으면 생성 스킵
          if find "${PROJECT_DIR}" -maxdepth 2 -name "pom.xml" | grep -q .; then
            echo "pom.xml detected -> skip Initializr download"
            exit 0
          fi

          BASE_URL="https://start.spring.io/starter.zip"
          ZIP_PATH="${RUNNER_TEMP}/${ARTIFACT_ID}.zip"
          DEPS_NO_SPACE="$(echo "${DEPENDENCIES}" | tr -d '[:space:]')"

          attempt_download() {
            local use_boot="$1"   # "with" or "without"
            local min_deps="$2"   # "full" or "minimal"
            local http_code

            echo "::group::Attempt: bootVersion=${use_boot}, deps=${min_deps}"
            if [ "${min_deps}" = "minimal" ]; then
              req_deps="web"
            else
              req_deps="${DEPS_NO_SPACE}"
            fi

            args=(
              --get -L -sS -o "${ZIP_PATH}" -w "%{http_code}"
              --data-urlencode "type=maven-project"
              --data-urlencode "language=java"
              --data-urlencode "baseDir=${ARTIFACT_ID}"
              --data-urlencode "groupId=${GROUP_ID}"
              --data-urlencode "artifactId=${ARTIFACT_ID}"
              --data-urlencode "name=${ARTIFACT_ID}"
              --data-urlencode "packageName=${PACKAGE_NAME}"
              --data-urlencode "javaVersion=${JAVA_VERSION}"
              --data-urlencode "dependencies=${req_deps}"
            )
            if [ "${use_boot}" = "with" ] && [ -n "${BOOT_VERSION}" ]; then
              args+=( --data-urlencode "bootVersion=${BOOT_VERSION}" )
            fi

            http_code="$(curl "${args[@]}" "${BASE_URL}" || true)"
            echo "HTTP ${http_code}"
            if [ "${http_code}" != "200" ]; then
              echo "::warning::Initializr request failed (HTTP ${http_code})"
              echo "::endgroup::"
              return 1
            fi

            if ! unzip -t "${ZIP_PATH}" >/dev/null 2>&1; then
              echo "::warning::Downloaded file is not a valid ZIP"
              echo "::endgroup::"
              return 1
            fi

            echo "::endgroup::"
            return 0
          }

          # 1) 사용자 bootVersion + 전체 deps → 실패 시 2) bootVersion 제거 → 실패 시 3) 최소 deps(web)
          if ! attempt_download "with" "full"; then
            echo "Retry without bootVersion..."
            if ! attempt_download "without" "full"; then
              echo "Retry with minimal deps..."
              if ! attempt_download "without" "minimal"; then
                echo "::error::All Initializr attempts failed"
                exit 1
              fi
            fi
          fi

          echo "Unzipping to ${PROJECT_DIR} ..."
          unzip -q "${ZIP_PATH}" -d "${PROJECT_DIR}"
          if [ -d "${PROJECT_DIR}/${ARTIFACT_ID}" ]; then
            shopt -s dotglob
            mv "${PROJECT_DIR}/${ARTIFACT_ID}/"* "${PROJECT_DIR}/"
            rmdir "${PROJECT_DIR}/${ARTIFACT_ID}"
          fi

      - name: Ensure basic files (.gitignore via curl, app.yml, sample controller) — no heredoc
        shell: bash
        run: |
          set -Eeuo pipefail

          # .gitignore: 원격 다운로드, 실패 시 로컬 생성 (printf)
          if [ ! -f ".gitignore" ]; then
            echo "Downloading Java.gitignore ..."
            if ! curl -fsSL "https://raw.githubusercontent.com/github/gitignore/main/Java.gitignore" -o ".gitignore"; then
              echo "::warning::.gitignore download failed; creating fallback"
              printf '%s\n' \
                'target/' \
                '.idea/' \
                '.project' \
                '.classpath' \
                '.settings/' \
                '.DS_Store' \
                '*.iml' \
                > .gitignore
            fi
          fi

          # resources/application.yml (printf)
          RES_DIR="src/main/resources"
          mkdir -p "${RES_DIR}"
          if [ ! -f "${RES_DIR}/application.yml" ]; then
            printf '%s\n' \
              'server:' \
              '  port: 8080' \
              'management:' \
              '  endpoints:' \
              '    web:' \
              '      exposure:' \
              '        include: health,info' \
              'spring:' \
              '  application:' \
              '    name: demo-app' \
              > "${RES_DIR}/application.yml"
          fi

          # 샘플 컨트롤러 (printf)
          APP_DIR="src/main/java/$(echo "${PACKAGE_NAME}" | tr '.' '/')"
          mkdir -p "${APP_DIR}"
          if ! ls "${APP_DIR}"/*.java >/dev/null 2>&1; then
            TMP_JAVA="${RUNNER_TEMP}/HelloController.java"
            printf '%s\n' \
              "package ${PACKAGE_NAME};" \
              "" \
              "import org.springframework.web.bind.annotation.GetMapping;" \
              "import org.springframework.web.bind.annotation.RestController;" \
              "" \
              "@RestController" \
              "public class HelloController {" \
              "  @GetMapping(\"/\")" \
              "  public String hello() {" \
              "    return \"Hello Spring Boot (curl + CI)!\";" \
              "  }" \
              "}" \
              > "${TMP_JAVA}"
            mv "${TMP_JAVA}" "${APP_DIR}/HelloController.java"
          fi

          # README.md (printf)
          if [ ! -f "README.md" ]; then
            printf '%s\n' \
              "# ${ARTIFACT_ID}" \
              "" \
              "Generated via GitHub Actions (curl + Spring Initializr)" \
              "" \
              "## Build" \
              '```bash' \
              "./mvnw -B -DskipTests package" \
              '```' \
              "" \
              "## Run" \
              '```bash' \
              "./mvnw spring-boot:run" \
              '```' \
              > README.md
          fi

      - name: Set up Java (Temurin ${{ env.JAVA_VERSION }})
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: ${{ env.JAVA_VERSION }}
          cache: "maven"

      - name: Make mvnw executable (if present)
        shell: bash
        run: |
          set -Eeuo pipefail
          if [ -f "./mvnw" ]; then
            chmod +x ./mvnw
          fi

      - name: Build with Maven Wrapper (or apt maven)
        shell: bash
        run: |
          set -Eeuo pipefail
          if [ -f "./mvnw" ]; then
            ./mvnw -B -DskipTests package
          else
            sudo apt-get update -y
            sudo apt-get install -y maven
            mvn -B -DskipTests package
          fi

      - name: List build outputs
        shell: bash
        run: |
          set -Eeuo pipefail
          echo "Artifacts under target/:"
          find target -maxdepth 1 -type f -name "*.jar" -print || true
