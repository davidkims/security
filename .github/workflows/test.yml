name: "CI (Spring Boot via curl + Self-Heal POM + Upgrade + Release)"

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      group_id:
        description: "Maven groupId"
        required: true
        default: "com.example"
      artifact_id:
        description: "Maven artifactId (프로젝트 폴더명)"
        required: true
        default: "demo-app"
      package_name:
        description: "기본 패키지 (예: com.example.demo)"
        required: true
        default: "com.example.demo"
      boot_version:
        description: "(선택) Spring Boot 버전. 비우면 Initializr 기본값"
        required: false
        default: ""
      java_version:
        description: "Java 버전"
        required: true
        default: "17"
      dependencies:
        description: "쉼표 구분 deps (예: web,actuator,lombok,validation)"
        required: true
        default: "web,actuator,lombok,validation"
      run_upgrade:
        description: "업그레이드 수행 여부 (Maven Wrapper/Boot/Deps)"
        required: true
        default: "true"
      run_release:
        description: "릴리즈 생성 여부 (JAR/소스 ZIP 업로드)"
        required: true
        default: "true"
      release_mode:
        description: "릴리즈 모드: auto-patch/minor/major/manual-tag"
        required: true
        default: "auto-patch"
      templates_zip_url:
        description: "(선택) 템플릿 ZIP RAW URL(오버레이)"
        required: false
        default: ""

permissions:
  contents: write
  actions: read

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      GROUP_ID: ${{ github.event.inputs.group_id || 'com.example' }}
      ARTIFACT_ID: ${{ github.event.inputs.artifact_id || 'demo-app' }}
      PACKAGE_NAME: ${{ github.event.inputs.package_name || 'com.example.demo' }}
      BOOT_VERSION: ${{ github.event.inputs.boot_version || '' }}
      JAVA_VERSION: ${{ github.event.inputs.java_version || '17' }}
      DEPENDENCIES: ${{ github.event.inputs.dependencies || 'web,actuator,lombok,validation' }}
      PROJECT_DIR: .
      RUN_UPGRADE: ${{ github.event.inputs.run_upgrade || 'true' }}
      RUN_RELEASE: ${{ github.event.inputs.run_release || 'true' }}
      RELEASE_MODE: ${{ github.event.inputs.release_mode || 'auto-patch' }}
      TEMPLATES_ZIP_URL: ${{ github.event.inputs.templates_zip_url || '' }}
      MVN_WRAPPER_TARGET: "3.9.9"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tools
        run: |
          set -Eeuo pipefail
          sudo apt-get update -y
          sudo apt-get install -y curl unzip zip git jq maven

      - name: Generate Spring Boot project via curl (robust + fallbacks)
        shell: bash
        run: |
          set -Eeuo pipefail
          if find "${PROJECT_DIR}" -maxdepth 2 -name "pom.xml" | grep -q .; then
            echo "pom.xml detected -> skip Initializr download"
            exit 0
          fi

          BASE_URL="https://start.spring.io/starter.zip"
          ZIP_PATH="${RUNNER_TEMP}/${ARTIFACT_ID}.zip"
          DEPS_NO_SPACE="$(echo "${DEPENDENCIES}" | tr -d '[:space:]')"

          attempt() {
            local use_boot="$1"   # with|without
            local deps="$2"       # full|minimal
            local req_deps="${DEPS_NO_SPACE}"
            [ "${deps}" = "minimal" ] && req_deps="web"
            args=( --get -L -sS --retry 3 --retry-delay 2 -o "${ZIP_PATH}" -w "%{http_code}"
                   --data-urlencode "type=maven-project"
                   --data-urlencode "language=java"
                   --data-urlencode "baseDir=${ARTIFACT_ID}"
                   --data-urlencode "groupId=${GROUP_ID}"
                   --data-urlencode "artifactId=${ARTIFACT_ID}"
                   --data-urlencode "name=${ARTIFACT_ID}"
                   --data-urlencode "packageName=${PACKAGE_NAME}"
                   --data-urlencode "javaVersion=${JAVA_VERSION}"
                   --data-urlencode "dependencies=${req_deps}" )
            if [ "${use_boot}" = "with" ] && [ -n "${BOOT_VERSION}" ]; then
              args+=( --data-urlencode "bootVersion=${BOOT_VERSION}" )
            fi
            code="$(curl "${args[@]}" "${BASE_URL}" || true)"
            echo "HTTP ${code}"
            [ "${code}" = "200" ] && unzip -t "${ZIP_PATH}" >/dev/null 2>&1
          }

          attempt with full || attempt without full || attempt without minimal || { echo "::error::Initializr download failed"; exit 1; }

          echo "Unzipping..."
          unzip -q "${ZIP_PATH}" -d "${PROJECT_DIR}"
          if [ -d "${PROJECT_DIR}/${ARTIFACT_ID}" ]; then
            shopt -s dotglob
            mv "${PROJECT_DIR}/${ARTIFACT_ID}/"* "${PROJECT_DIR}/"
            rmdir "${PROJECT_DIR}/${ARTIFACT_ID}"
          fi

      - name: Overlay templates & create defaults (stable + fallback)
        shell: bash
        run: |
          set -Eeuo pipefail

          fetch() { curl -fsSL --retry 2 --retry-delay 1 "$1" -o "$2"; }

          # (0) Overlay ZIP (사용자 제공 시)
          if [ -n "${TEMPLATES_ZIP_URL}" ]; then
            TMP_Z="${RUNNER_TEMP}/tpl.zip"
            if fetch "${TEMPLATES_ZIP_URL}" "${TMP_Z}" && unzip -t "${TMP_Z}" >/dev/null 2>&1; then
              unzip -oq "${TMP_Z}" -d .
            else
              echo "::warning::templates_zip_url invalid or unreachable; skipped"
            fi
          fi

          # (1) .gitignore
          if [ ! -f ".gitignore" ]; then
            if ! fetch "https://raw.githubusercontent.com/github/gitignore/refs/heads/main/Java.gitignore" ".gitignore"; then
              printf '%s\n' 'target/' '.idea/' '.project' '.classpath' '.settings/' '.DS_Store' '*.iml' > .gitignore
            fi
          fi

          # (2) resources yml들
          RES="src/main/resources"; mkdir -p "${RES}"
          [ -f "${RES}/application.yml" ] || printf '%s\n' \
            'server:' '  port: 8080' \
            'management:' '  endpoints:' '    web:' '      exposure:' '        include: health,info' \
            'spring:' '  application:' '    name: demo-app' > "${RES}/application.yml"
          [ -f "${RES}/application-dev.yml" ] || printf '%s\n' \
            'spring:' '  config:' '    activate:' '      on-profile: dev' \
            'server:' '  port: 8081' > "${RES}/application-dev.yml"
          [ -f "${RES}/application-prod.yml" ] || printf '%s\n' \
            'spring:' '  config:' '    activate:' '      on-profile: prod' \
            'server:' '  port: 8080' > "${RES}/application-prod.yml"

          # (3) Dockerfile / compose / Procfile / Makefile
          [ -f "Dockerfile" ] || printf '%s\n' \
            'FROM eclipse-temurin:17-jre' \
            'WORKDIR /app' \
            'ARG JAR_FILE=target/*.jar' \
            'COPY ${JAR_FILE} app.jar' \
            'EXPOSE 8080' \
            'ENTRYPOINT ["java","-jar","/app/app.jar"]' > Dockerfile
          [ -f "compose.yaml" ] || printf '%s\n' \
            'services:' \
            '  app:' \
            '    build: .' \
            '    ports:' \
            '      - "8080:8080"' \
            '    environment:' \
            '      - SPRING_PROFILES_ACTIVE=dev' > compose.yaml
          [ -f "Procfile" ] || printf '%s\n' 'web: java -jar target/*.jar' > Procfile
          if [ ! -f "Makefile" ]; then
            printf '%s\n' \
              'build:' '\t./mvnw -B -DskipTests package' \
              'run:'   '\t./mvnw spring-boot:run' > Makefile
          fi

          # (4) 샘플 컨트롤러(없을 때만)
          APP_DIR="src/main/java/$(echo "${PACKAGE_NAME}" | tr '.' '/')"
          mkdir -p "${APP_DIR}"
          if ! ls "${APP_DIR}"/*.java >/dev/null 2>&1; then
            TMP_JAVA="${RUNNER_TEMP}/HelloController.java"
            printf '%s\n' \
              "package ${PACKAGE_NAME};" \
              "" \
              "import org.springframework.web.bind.annotation.GetMapping;" \
              "import org.springframework.web.bind.annotation.RestController;" \
              "" \
              "@RestController" \
              "public class HelloController {" \
              "  @GetMapping(\"/\")" \
              "  public String hello() {" \
              "    return \"Hello Spring Boot (curl + CI)!\";" \
              "  }" \
              "}" > "${TMP_JAVA}"
            mv "${TMP_JAVA}" "${APP_DIR}/HelloController.java"
          fi

          # (5) README
          if [ ! -f "README.md" ]; then
            printf '%s\n' \
              "# ${ARTIFACT_ID}" "" \
              "Generated via GitHub Actions (curl + Initializr + Upgrade + Release)" "" \
              "## Build" '```bash' "./mvnw -B -DskipTests package" '```' "" \
              "## Run" '```bash' "./mvnw spring-boot:run" '```' > README.md
          fi

      - name: Ensure main class and SELF-HEAL POM (no risky sed)
        shell: bash
        run: |
          set -Eeuo pipefail

          # 1) 메인 클래스 보장
          APP_DIR="src/main/java/$(echo "${PACKAGE_NAME}" | tr '.' '/')"
          mkdir -p "${APP_DIR}"
          if ! grep -Rsl --include="*.java" "@SpringBootApplication" src/main/java >/dev/null 2>&1; then
            echo "No @SpringBootApplication found → create Application.java"
            cat > "${APP_DIR}/Application.java" <<EOF
          package ${PACKAGE_NAME};

          import org.springframework.boot.SpringApplication;
          import org.springframework.boot.autoconfigure.SpringBootApplication;

          @SpringBootApplication
          public class Application {
            public static void main(String[] args) {
              SpringApplication.run(Application.class, args);
            }
          }
          EOF
          fi

          # 2) POM 셀프 힐
          DEFAULT_BOOT="${BOOT_VERSION:-3.3.3}"
          DEFAULT_VER="0.0.1"
          if [ ! -f pom.xml ]; then
            echo "No pom.xml → create fresh Spring Boot POM"
            cat > pom.xml <<EOF
          <project xmlns="http://maven.apache.org/POM/4.0.0"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
            <modelVersion>4.0.0</modelVersion>

            <parent>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-starter-parent</artifactId>
              <version>${DEFAULT_BOOT}</version>
              <relativePath/>
            </parent>

            <groupId>${GROUP_ID}</groupId>
            <artifactId>${ARTIFACT_ID}</artifactId>
            <version>${DEFAULT_VER}</version>
            <name>${ARTIFACT_ID}</name>
            <description>Spring Boot app</description>
            <packaging>jar</packaging>

            <properties>
              <java.version>${JAVA_VERSION}</java.version>
            </properties>

            <dependencies>
              <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter</artifactId>
              </dependency>
              <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-test</artifactId>
                <scope>test</scope>
              </dependency>
            </dependencies>

            <build>
              <plugins>
                <plugin>
                  <groupId>org.springframework.boot</groupId>
                  <artifactId>spring-boot-maven-plugin</artifactId>
                </plugin>
              </plugins>
            </build>
          </project>
          EOF
          else
            echo "Validate POM with Maven (will fail if malformed)"
            if ! mvn -q -DskipTests help:evaluate -Dexpression=project.version >/dev/null 2>&1; then
              echo "::warning::Malformed POM detected → backup and recreate"
              cp pom.xml pom.xml.broken.$(date +%s) || true
              cat > pom.xml <<EOF
          <project xmlns="http://maven.apache.org/POM/4.0.0"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
            <modelVersion>4.0.0</modelVersion>

            <parent>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-starter-parent</artifactId>
              <version>${DEFAULT_BOOT}</version>
              <relativePath/>
            </parent>

            <groupId>${GROUP_ID}</groupId>
            <artifactId>${ARTIFACT_ID}</artifactId>
            <version>${DEFAULT_VER}</version>
            <name>${ARTIFACT_ID}</name>
            <description>Spring Boot app</description>
            <packaging>jar</packaging>

            <properties>
              <java.version>${JAVA_VERSION}</java.version>
            </properties>

            <dependencies>
              <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter</artifactId>
              </dependency>
              <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-test</artifactId>
                <scope>test</scope>
              </dependency>
            </dependencies>

            <build>
              <plugins>
                <plugin>
                  <groupId>org.springframework.boot</groupId>
                  <artifactId>spring-boot-maven-plugin</artifactId>
                </plugin>
              </plugins>
            </build>
          </project>
          EOF
            else
              echo "POM seems valid → ensure essentials without risky inline edits"

              # (a) java.version
              if ! grep -q "<java.version>" pom.xml; then
                awk '1;/<properties>/{print "    <java.version>'"${JAVA_VERSION}"'</java.version>"}' pom.xml > pom.tmp && mv pom.tmp pom.xml
              fi

              # (b) spring-boot-starter 존재 보장
              if ! grep -q '<artifactId>spring-boot-starter</artifactId>' pom.xml; then
                if grep -q '<dependencies>' pom.xml; then
                  awk '
                    /<dependencies>/ && !added {
                      print;
                      print "    <dependency>";
                      print "      <groupId>org.springframework.boot</groupId>";
                      print "      <artifactId>spring-boot-starter</artifactId>";
                      print "    </dependency>";
                      added=1; next
                    }1
                  ' pom.xml > pom.tmp && mv pom.tmp pom.xml
                else
                  sed -i 's#</project>#  <dependencies>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter</artifactId>\n    </dependency>\n  </dependencies>\n</project>#' pom.xml
                fi
              fi

              # (c) spring-boot-maven-plugin 존재 보장
              if ! grep -q '<artifactId>spring-boot-maven-plugin</artifactId>' pom.xml; then
                if grep -q '<build>' pom.xml; then
                  awk '
                    /<build>/ && !added {
                      print;
                      print "    <plugins>";
                      print "      <plugin>";
                      print "        <groupId>org.springframework.boot</groupId>";
                      print "        <artifactId>spring-boot-maven-plugin</artifactId>";
                      print "      </plugin>";
                      print "    </plugins>";
                      added=1; next
                    }1
                  ' pom.xml > pom.tmp && mv pom.tmp pom.xml
                else
                  sed -i 's#</project>#  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-maven-plugin</artifactId>\n      </plugin>\n    </plugins>\n  </build>\n</project>#' pom.xml
                fi
              fi
            fi
          fi

      - name: Ensure Maven Wrapper present (mvnw)
        shell: bash
        run: |
          set -Eeuo pipefail
          mvn -B -ntp -N wrapper:wrapper -Dmaven="${MVN_WRAPPER_TARGET}" || true
          chmod +x ./mvnw || true

      - name: Set up Java (Temurin ${{ env.JAVA_VERSION }})
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: ${{ env.JAVA_VERSION }}
          cache: "maven"

      - name: Upgrade (Maven Wrapper / Spring Boot / Deps)
        if: ${{ env.RUN_UPGRADE == 'true' }}
        shell: bash
        run: |
          set -Eeuo pipefail
          ./mvnw -B -ntp -N wrapper:wrapper -Dmaven="${MVN_WRAPPER_TARGET}" || true
          [ -f "./mvnw" ] && chmod +x ./mvnw
          if [ -n "${BOOT_VERSION}" ]; then
            ./mvnw -B -ntp versions:set-property -Dproperty=spring-boot.version -DnewVersion="${BOOT_VERSION}" -DgenerateBackupPoms=false || true
            ./mvnw -B -ntp versions:update-parent -DparentVersion="[${BOOT_VERSION}]" -DgenerateBackupPoms=false || true
          fi
          ./mvnw -B -ntp versions:use-latest-releases -DallowSnapshots=false -DgenerateBackupPoms=false || true

      - name: Build with Maven Wrapper
        shell: bash
        run: |
          set -Eeuo pipefail
          ./mvnw -B -DskipTests package

      - name: List build outputs
        shell: bash
        run: |
          set -Eeuo pipefail
          echo "Artifacts under target/:"
          find target -maxdepth 1 -type f -name "*.jar" -print || true

      - name: Optionally bump version in pom.xml (for auto-* modes)
        if: ${{ env.RUN_RELEASE == 'true' && github.event_name != 'pull_request' && startsWith(env.RELEASE_MODE, 'auto-') }}
        shell: bash
        run: |
          set -Eeuo pipefail
          CURR_VER="$(./mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive org.codehaus.mojo:exec-maven-plugin:3.5.0:echo | tail -n1 | sed 's/-SNAPSHOT$//')"
          [ -z "${CURR_VER}" ] && CURR_VER="0.0.1"
          IFS='.' read -r MAJ MIN PAT <<< "$(printf '%s' "${CURR_VER:-0.0.1}.0.0" | cut -d- -f1)"
          : "${MAJ:=0}" ; : "${MIN:=0}" ; : "${PAT:=0}"
          case "${RELEASE_MODE}" in
            auto-major) MAJ=$((MAJ+1)); MIN=0; PAT=0 ;;
            auto-minor) MIN=$((MIN+1)); PAT=0 ;;
            auto-patch|*) PAT=$((PAT+1)) ;;
          esac
          NEW_VER="${MAJ}.${MIN}.${PAT}"
          ./mvnw -B -ntp versions:set -DnewVersion="${NEW_VER}" -DgenerateBackupPoms=false || true
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add pom.xml
          git commit -m "chore(release): bump version to ${NEW_VER}" || true
          git push || true
          echo "NEW_VERSION=${NEW_VER}" >> $GITHUB_ENV

      - name: Prepare tag for release
        if: ${{ env.RUN_RELEASE == 'true' && github.event_name != 'pull_request' }}
        id: tagger
        shell: bash
        run: |
          set -Eeuo pipefail
          if [ -n "${NEW_VERSION}" ]; then
            TAG="v${NEW_VERSION}"
          else
            TAG="v$(date +%Y%m%d-%H%M%S)"
          fi
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          git tag -a "${TAG}" -m "Release ${TAG}" || true
          git push origin "${TAG}" || true

      - name: Zip source for release
        if: ${{ env.RUN_RELEASE == 'true' && github.event_name != 'pull_request' }}
        shell: bash
        run: |
          set -Eeuo pipefail
          git archive -o "${RUNNER_TEMP}/${{ env.ARTIFACT_ID }}-src.zip" HEAD

      - name: Create GitHub Release and Upload Artifacts
        if: ${{ env.RUN_RELEASE == 'true' && github.event_name != 'pull_request' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tagger.outputs.tag }}
          name: Release ${{ steps.tagger.outputs.tag }}
          generate_release_notes: true
          files: |
            target/*.jar
            ${{ runner.temp }}/${{ env.ARTIFACT_ID }}-src.zip
